/*
Megan McElenney
*/
package bingotester;

public class Board 
{
    int [][] board; 
    private int [] used;
    public Board()//constructor
    {
        board = new int [5][5];
        used = new int [76];
    }
    public void board()//prints the board
    {
        for(int c = 0; c < board[0].length; c++)
        {
            for(int r = 0; r < board.length; r++)
            {
                board[r][c] = getNum(c); 
            }
        }
    }
    private int getNum(int limit)//helper method for the board
    {
        int temp = 0;
        do
        {
            temp = (int) (Math.random() * 15 + 1 + (15* limit));
        }while(used[temp] != 0);
        used[temp] = 1;
        return temp;
        
    }
    public String toString()
    {
        String temp = "";
        for(int r =0; r < board.length; r++)
        {
            for(int col = 0; col < board[0].length; col++)
            {
                temp += " " + board[r][col] + "\t";
            }
            temp += "\n";
        }
        return "  B \t I \t N \t G \t O\n\n" + temp;
    }
    
    public void mark(int card)//equivalent of placing a tiddlywink
    {
        for(int row = 0; row < board.length;row++)
        for(int col = 0; col < board.length; col++)
        {
            if(board[row][col] == card)
                board[row][col] = 0;
        }
    }
    
    public Boolean win()//checks board for a win after each card
    {
        boolean winner = true;
        for(int row = 0; row < board.length; row++)//checks columns
        {
            int count = 0;
            for(int col = 0; col < board[0].length; col++)
            {
                if(board[row][col] != 0)
                {
                    winner = false;
                }
                else
                    count++;
            }
            if(count == 5)
            {
                return true;
            }
        }
        for(int col = 0; col < board[0].length; col++)//checks rows
        {
            int count = 0;
            for(int row = 0; row < board.length; row++)
            {
                if(board[row][col] != 0)
                {
                    winner = false;
                }
                else
                    count++;
            }
            if(count == 5)
            {
                return true;
            }
        }
        int sumMajorDiagonal = 0;
        for(int i = 0; i < board.length; i++)//major diagonal
        {
            sumMajorDiagonal += board[i][i];
        }
        if(sumMajorDiagonal == 0)
            return true;
        int sumMinorDiagonal = 0;
        for(int i = 0; i < board.length; i++)//minor diagonal
        {
            sumMinorDiagonal += board[i][board.length - i - 1];
        }
        if(sumMinorDiagonal == 0)
            return true;
        return false;
    }
}
